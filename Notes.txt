Day 1:
internal class Order {
    List<OrderLine> lineItems;
    public Boolean isPrepaid {get; set; }
    public Date dateReceived {get; set; }
    //...   
}
class Person {
	Car[] carsOwned;
}
class Car {
	Person owner;
}

class Customer {
    string name;
    string address;
    public virtual string getCreditRating() { 
       //...
    }
}
class PersonalCustomer : Customer {
    string creditCardNumber;
    public override string getCreditRating(){ 
       return "poor";
    }
}
class CorporateCustomer : Customer {
    string contactName, creditRating;
    double creditLimit;
    Employee salesRep;
    public string billForMonth(int month) { 
       //...
    }
    public void remind() { //...
    }
}
class Order {
    Customer cust;
    List<OrderLine> lineItems;
    Date dateReceived;
    Boolean isPrepaid;
    string number;
    Money price;
    public void dispatch() { ... }
    public void close() { .... }
    public int getNumber() { ... }
    public static int getNextNewNumber() { ...}
}
class OrderLine {
    int quantity;
    Money price;
    Product p;
}

class Team {
}
class Player {
	Team t;
}
Aggregation = Association + whole/part relation
Composition = Aggregation + parts not independent

interface EmailSystem { 
	void send(Message message);
}
class SMTPMailSystem : EmailSystem {
	public void send(Message message) {
        }

}
interface Collection {
    bool equals();
    void add(object o);
}
interface List : Collection {
    object get(int index);
}
abstract class AbstractList : List {
    bool equals() { ... }
    void add(object o) { ... }
    abstract object get(int index);
}
class ArrayList : AbstractList {
    override void add(object o) { ... }
    object get(int index) { ... }
}

Address: String //No need for class
Address: house no, street, city, pincode

Q57 - Question 
S57 - Solution
Exercise: Day1\Q58
Soluion: Day1\S58

Duplication:
Q021: BookRentals; 
Q11: BookRental; 
Q33 – SurveyData; 
Q37 – FOC, TT
Q10 – Jbutton
Q34 – replace; 
Q35 – BookRental

Most application, the bottleneck is not CPU; it is
the network or disk.

Day 2:
Exercises in Day2 folder: Q022, Q01, Q56, Q59

Small classes, less LOC, better design.

SRP: Q50, Q51, Q55

Pure Function: Q60, Q61
Big Algo - Pipe between classes  - Q62

Self documenting code: Q20, Q06, Q07, Q21, Q22, Q23, Q25

	i + j - k;
Name all hard-coded constants - Q32



void f1() {
   try {
	smallfunc0();
	smallfunc1();
	smallfunc2();
	smallfunc3();
    } catch (Exception1 ex) {
	log(ex.getMessage());
        giveUserMessage(ex.getMessage());
    }    
}

Samurai principle - Q32

class Retangle {
	public void setWidth() { ... }
        public virtual void setHeight() { ... }
}
class Square : Rectangle {
	public override void setHeight() { throw Exception(); }	

Why Design Patterns?
- Reuse of existing design.
- Faster
- Understanding

Exercise: HRapplication.
=================================================
Github: https://bit.ly/3ypgSaQ
Day 3
if (tc == 1) 
	...
else if (tc == 2)
	...
else if (tc == 3)
	...
else
	throw new Exception("...");

Polymorphism: Q30, Q40Smell, Q43smell, Q36.

 Q94, Q91 - DIP
S94.cs is in Trng\Demo1

Decorator:
	Black Tea = Rs 50 = new Tea();
	Tea + Milk = Rs 60 = new Milk(new Tea());
        Tea + Sugar = Rs 55 = new Sugar(new Tea());
	Tea = Rs 65 = new Sugar(new Milk(new Tea()));
	Coffee Black = Rs 80 = new Coffee
	Coffee + milk = Rs 90
	Coffee + sugar = Rs 85
	Coffee = Rs 95

	new Tags(new PhotoBorder(new PlainPhoto()));
	new VerticalScrollBar(
		new HorizontalScrollBar(new Window()));
	new ExistingFileCheck (new Report())

Report 1: 1 to 500
Report 2: A-Z 10 times
Header1: Date
Header2: Company name
Footer1: Time
Footer2: Company address
	new Footer2(new Header2(new Header1(new Report1())))
DecoratorAssignment.cs

Day 4:
Object Pool
	For Reusable, create 10 objects.
	Reusable pool is a thread-safe singleton to manage Reusable.
	In client start 20 threads.
	Each thread
          While(1)
		Wait for a random amount of seconds
		Ask ReusablePool for Reusable object.
		Print the count of Reusable or Thread id.
		Wait for a random amount of seconds
		Release the Reusable object to ReusablePool		
		Print release message for the count of Reusable or Thread id.

Singleton can inherit from another class.
It can implement interfaces.

MultiTon
	"A" - Resuable(1)
	"C" - Resuable(2)
	"A" - existing Reusable(1)
	"D" - Resuable(3)

How to avoid Null checking?
	- Return empty string or empty collection
	- Null pattern
	- Optional
			Optional<int> divide (int numerator, int denominator, Optional<int> multipiler)
	- Document





